buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
        classpath 'de.undercouch:gradle-download-task:1.2'
    }
}

apply plugin: 'forge'
apply plugin: 'de.undercouch.download'
apply plugin: 'java'

targetCompatibility = '1.8'
sourceCompatibility = '1.8'

group = GROUP
archivesBaseName = ARCHIVE_NAME
version = VERSION

sourceSets {
    main {
        java {
            srcDirs = ['src/main/java']
        }
        resources {
            srcDirs = ['src/main/resources']
        }
    }
}

minecraft {
    version = "1.7.10-10.13.2.1291"
    runDir = "run"

    srgExtra "PK: org/apache/commons/math3 mods/eln/libs/org/apache/commons/math3"
    srgExtra "PK: com/serotonin mods/eln/libs/com/serotonin"
    srgExtra "PK: gnu/io mods/eln/libs/gnu/io"
}



configurations {
    external
    compile.extendsFrom external
}

dependencies {
    external files("libs/commons-math3-3.3.jar", "libs/modbus4J.jar", "libs/seroUtils.jar")
}

jar {
    from { configurations.external.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude(['dan200/**', 'ic2/**', 'li/**', 'buildcraft/**'])

    // Exclude unused (temp/source) resource files to reduce the size of the release jar
    exclude(['**/*.ai', '**/*.blend', '**/*.blend1', '**/*.blend2', '**/*.rar', '**/*.wav', '**/*.m_p'])

    // Add README and LICENSE to the release jar
    from(['README.md', 'LICENSE.md'])
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }

    exclude('**/temp/**') // Temporary asset folder
}

clean {
    // Clean generated/built files. Saves are NOT deleted.
    delete("${minecraft.runDir}/logs")
    delete("${minecraft.runDir}/crash-reports")
}

def getMinecratfDir() {
    String outDir = ""
    final String osName = System.getProperty("os.name").toLowerCase()
    if (osName.contains('windows'))
        outDir = System.getenv("APPDATA") + "/.minecraft"
    else if (osName.contains('os x'))
        outDir = System.getProperty("user.home") + "/Library/Application Support/minecraft"
    else if (osName.contains('linux'))
        outDir = System.getProperty("user.home") + "/.minecraft"
    return outDir
}

// Custom task to build and copy the mod Jar to the default local Minecraft folder
task buildAndCopyJar(dependsOn: 'build', type: Copy) {
    outputs.upToDateWhen { false } // Force to run this task
    duplicatesStrategy = DuplicatesStrategy.INCLUDE // Overwrite the file if exists

    from("build/libs")
    into(getMinecratfDir() + "/mods")
    include("*.jar")
}

import de.undercouch.gradle.tasks.download.Download

// Download the tutorial map as a zip file to the local 'run/saves' folder
task downloadTutoMap(type: Download) {
    src(MAP_URL)
    dest(new File(minecraft.runDir + "/saves", MAP_URL.substring(MAP_URL.lastIndexOf("/") + 1, MAP_URL.length())))
    overwrite true
}

// Unzip the local tutorial map after downloading it. Overwrite the map content if already exist
task unzipTutoMap(dependsOn: downloadTutoMap, type: Copy) {
    outputs.upToDateWhen { false } // Force to run this task

    from zipTree(downloadTutoMap.dest)
    into(minecraft.runDir + "/saves")
}
